from aiogram import Router, F
from aiogram.filters import and_f, or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

import config
import db
import keyboards
import msg
from filters import QueryDataFilter
from states import User, Worker

import main

router = Router(name=__name__)


@router.callback_query(QueryDataFilter('looking_for_job'))
async def user_looking_for_job(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await state.set_state(Worker.menu)
        await query.message.edit_text(text='–ú–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞üè¢', reply_markup=await keyboards.worker_menu())
    except Exception as ex:
        print(ex, type(ex))


@router.callback_query(QueryDataFilter('reply_to_offer'))
async def reply_to_offer(query: CallbackQuery, state: FSMContext):
    try:
        project_id = query.message.text.split('\n')[1][-4:]
        client_id = await db.reply_to_offer(project_id)
        spec_info = await db.get_specialist_info(query.from_user.id)
        if spec_info[6] != 'None':
            await main.bot.send_message(chat_id=client_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
                                                                f' –ø–æ –∑–∞–∫–∞–∑—É #{project_id}\n\n–ò–º—è: {spec_info[4]}\n'
                                                                f'–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {spec_info[8]}\nTelegram: {spec_info[2]}\n'
                                                                f'Email: {spec_info[5]}\nPhone: {spec_info[6]}')
        else:
            await main.bot.send_message(chat_id=client_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
                                                                f' –ø–æ –∑–∞–∫–∞–∑—É #{project_id}\n\n–ò–º—è: {spec_info[4]}\n'
                                                                f'–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {spec_info[8]}\nTelegram: {spec_info[2]}\n'
                                                                f'Email: {spec_info[5]}\n')
        await query.message.edit_text(text='–ó–∞–∫–∞–∑—á–∏–∫—É –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!\n'
                                           '–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–Ω —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è')
        await query.answer(text='–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    except Exception as ex:
        print(ex)
        await query.message.edit_text(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ(')


@router.callback_query(QueryDataFilter('worker_cv'))
async def edit_cv(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        info = await db.get_user_cv(query.from_user.id)
        print(info)
        if info is not None and not info[7]:
            await query.message.edit_text(text=f'–í–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!',
                                          reply_markup=await keyboards.delete_kbd())
        elif info is not None:
            cv_info = info
            print(cv_info)
            # skills = cv_info[1]
            if cv_info[3] != 'None':
                await query.message.edit_text(text=f'–í–∞—à–µ —Ä–µ–∑—é–º–µ:\n\n–í–∞—à–µ –∏–º—è: {cv_info[1]}\n'
                                                   f'email: {cv_info[2]}\n–¢–µ–ª–µ—Ñ–æ–π: {cv_info[3]}\n'
                                                   f'–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {cv_info[4]}\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {cv_info[5]}\n'
                                                   f'–•–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                              reply_markup=await keyboards.ask_to_edit_cv_ikb())
            else:
                await query.message.edit_text(text=f'–í–∞—à–µ —Ä–µ–∑—é–º–µ:\n\n–í–∞—à–µ –∏–º—è: {cv_info[1]}\n'
                                                   f'email: {cv_info[2]}\n'
                                                   f'–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {cv_info[4]}\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {cv_info[5]}\n'
                                                   f'–•–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å?',
                                              reply_markup=await keyboards.ask_to_edit_cv_ikb())
            await state.set_state(Worker.look_through_cvs)

        else:
            await query.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—é–º–µ\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'
                                               '\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
                                          reply_markup=await keyboards.delete_kbd())
            await state.set_state(Worker.enter_name)
    except Exception as ex:
        print(f'Error in spec.search_job\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('change_cv'), Worker.look_through_cvs))
async def edit_cv(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await query.message.edit_text(text='–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'
                                           '\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
                                      reply_markup=await keyboards.delete_kbd())
        await state.set_state(Worker.enter_name)
    except Exception as ex:
        print(f'Error in spec.search_job\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('cancel_change_cv'), Worker.look_through_cvs))
async def cancel_change_cv(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await state.set_state(Worker.menu)
        await query.message.edit_text(text='–ú–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞üè¢', reply_markup=await keyboards.worker_menu())
    except Exception as ex:
        print(f'Error in spec.search_job\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(QueryDataFilter('search_job'))
async def search_job(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        if await db.check_cv(query.from_user.id):
            # print(await db.if_user_afk(query.from_user.id))
            b = await db.if_user_afk(query.from_user.id)
            if b != -1:
                await query.message.edit_text(text='–•–æ—Ç–∏—Ç–µ –ª–∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ?',
                                              reply_markup=await keyboards.afk_ikb(b))
                await state.set_state(Worker.switch_afk)
            else:
                await state.clear()
                await query.message.edit_text(text='–í–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏...',
                                              reply_markup=await keyboards.worker_menu())
        else:
            await query.message.edit_text(text='–£ –≤–∞—Å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ —Ä–µ–∑—é–º–µ!\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ'
                                               '\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
                                          reply_markup=await keyboards.delete_kbd())
            await state.set_state(Worker.enter_name)
    except Exception as ex:
        print(f'Error in spec.search_job\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(or_f(QueryDataFilter('0'), QueryDataFilter('1')), Worker.switch_afk))
async def switch_afk(query: CallbackQuery, state: FSMContext):
    try:
        if await db.switch_afk(query.from_user.id, int(query.data)):
            if int(query.data) == 0:
                await query.answer(text='–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω!', cache_time=3)
            else:
                await query.answer(text='–ü–æ–∏—Å–∫ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á—ë–Ω!', cache_time=3)
            await state.set_state(Worker.menu)
            await query.message.edit_text(text='–ú–µ–Ω—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞üè¢', reply_markup=await keyboards.worker_menu())
    except Exception as ex:
        print(f'Error in spec.search_job\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.message(Worker.enter_name)
async def enter_name(message: Message, state: FSMContext):
    try:
        await state.update_data(enter_name=message.text)
        await state.set_state(Worker.enter_email)
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æüòâ\n–ò–¥—ë–º –¥–∞–ª—å—à–µ\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã:',
                             reply_markup=await keyboards.delete_kbd())
    except Exception as ex:
        print(f'Exceptinon in ener_name:\n{ex}')


@router.message(and_f(F.text.contains('@'), Worker.enter_email))
async def enter_email(message: Message, state: FSMContext):
    try:
        await state.update_data(enter_email=message.text)
        await state.set_state(Worker.enter_phone)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                             reply_markup=await keyboards.cancel_enter_phone_ikb())
    except Exception as ex:
        print(f'Exceptinon in ener_name:\n{ex}')


@router.message(Worker.enter_email)
async def enter_wrong_email(message: Message, state: FSMContext):
    try:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!\n–ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏')
    except Exception as ex:
        print(f'Exceptinon in ener_wrong_name:\n{ex}')


@router.message(and_f(F.text.contains('+375'), Worker.enter_phone))
async def enter_phone(message: Message, state: FSMContext):
    try:
        if len(message.text) == 13:
            await state.update_data(enter_phone=message.text)
            await state.set_state(Worker.choose_specialty)
            await message.answer(text='–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:',
                                 reply_markup=await keyboards.get_specialists_ikb())
        else:
            await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞!\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +375XXXXXXXXX',
                                 reply_markup=await keyboards.cancel_enter_phone_ikb())
    except Exception as ex:
        print(f'Exceptinon in ener_name:\n{ex}')


@router.message(Worker.enter_phone)
async def enter_wrong_phone(message: Message, state: FSMContext):
    try:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞!\n'
                                  '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –Ω–æ–º–µ—Ä —Å –∫–æ–¥–æ–º +375',
                             reply_markup=await keyboards.cancel_enter_phone_ikb())
    except Exception as ex:
        print(f'Exceptinon in ener_name:\n{ex}')


@router.callback_query(and_f(Worker.enter_phone, QueryDataFilter('cancel')))
async def enter_email(query: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(enter_phone=None)
        await state.set_state(Worker.choose_specialty)
        await query.message.edit_text(text='–í–∞—Å –ø–æ–Ω—è–ª!\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:',
                                      reply_markup=await keyboards.get_specialists_ikb())
    except Exception as ex:
        print(f'Exceptinon in ener_name:\n{ex}')


@router.callback_query(Worker.choose_specialty)
async def choose_specialty(query: CallbackQuery, state: FSMContext):
    try:
        if query.data in config.specialties:
            if query.data == config.specialties[-1]:
                await state.set_state(Worker.add_new_specialty)
                await query.message.edit_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –º—ã –¥–æ–±–∞–≤–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏:',
                                              reply_markup=await keyboards.delete_kbd())
            else:
                await state.update_data(choose_specialty=query.data)
                await state.set_state(Worker.enter_link)
                await query.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:',
                                              reply_markup=await keyboards.delete_kbd())
                # await state.set_state(Worker.choose_super_power)
                #
                # await query.message.edit_text('–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—åü§è\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: ',
                #                               reply_markup=await keyboards.get_worker_abilities_ikb(query.data))
                # TODO —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
        else:
            await query.message.edit_text('–•–æ—Ä–æ—à–æ, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º....')
    except Exception as ex:
        print(f'Exceptinon in ener_name:\n{ex}')


@router.message(Worker.enter_link)
async def enter_link(message: Message, state: FSMContext):
    try:
        await state.update_data(enter_link=message.text)
        await state.set_state(Worker.check_cv)
        info = await state.get_data()
        await message.answer(text=f'–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç, —á—Ç–æ —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n–í–∞—à–µ –∏–º—è:{info.get("enter_name")}\n'
                                  f'–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {info.get("choose_specialty")}\n'
                                  f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {info.get("enter_link")}\n'
                                  f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info.get("enter_phone")}\n'
                                  f'Email: {info.get("enter_email")}\n\n'
                                  f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ?',
                             reply_markup=await keyboards.check_cv_ikb())
    except Exception as ex:
        print(f'Exceptinon in ener_link: {ex}')


# @router.callback_query(and_f(Worker.choose_super_power, QueryDataFilter('stop')))
# async def stop_choose_super_power(query: CallbackQuery, state: FSMContext):
#     try:
#         await state.set_state(Worker.check_cv)
#         info = await state.get_data()
#         abil = ''
#         for a, t in zip(info.get('choose_super_power')[:-1], info.get('choose_duration')[:-1]):
#             abil += f'{a} - {t},\n'
#         abil += f'{info.get("choose_super_power")[-1]} - {info.get("choose_duration")[-1]}'
#         await query.message.edit_text(text=f'–û—Ç–ª–∏—á–Ω–æ!\n–í–æ—Ç, —á—Ç–æ —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n–í–∞—à–µ –∏–º—è:{info.get("enter_name")}\n'
#                                            f'–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {info.get("choose_specialty")}\n'
#                                            f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {info.get("enter_link")}\n'
#                                            f'–ù–∞–≤—ã–∫–∏: {abil}\n'
#                                            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info.get("enter_phone")}\n'
#                                            f'Email: {info.get("enter_email")}\n\n'
#                                            f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ?',
#                                       reply_markup=await keyboards.check_cv_ikb())
#
#     except Exception as ex:
#         print(f'Exceptinon in ener_name:\n{ex}')


# @router.callback_query(Worker.choose_super_power)
# async def choose_super_power(query: CallbackQuery, state: FSMContext):
#     try:
#         spec = (await state.get_data()).get('choose_specialty')
#         if query.data in config.abilities[spec]:
#             info = await state.get_data()
#             arr = []
#             if 'choose_super_power' in info.keys():
#                 arr = info.get('choose_super_power')
#                 arr.append(query.data)
#                 await state.update_data(choose_super_power=arr)
#             else:
#                 arr.append(query.data)
#                 await state.update_data(choose_super_power=arr)
#             await state.set_state(Worker.choose_duration)
#             await query.message.edit_text(text='–£–∫–∞–∂–∏—Ç–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–∏–≤–∞–µ–º–æ–µ –Ω–∞ –∑–∞–¥–∞—á—É:',
#                                           reply_markup=await keyboards.get_time_ikb())
#         else:
#             pass
#             # TODO else case
#
#     except Exception as ex:
#         print(f'Exceptinon in choose_super_power:\n{ex}')
#
#
# @router.callback_query(Worker.choose_duration)
# async def choose_duration(query: CallbackQuery, state: FSMContext):
#     try:
#         if query.data in config.times:
#             arr = []
#             if 'choose_duration' in (await state.get_data()).keys():
#                 arr = (await state.get_data()).get('choose_duration')
#             arr.append(query.data)
#             await state.update_data(choose_duration=arr)
#             await state.set_state(Worker.choose_super_power)
#             arr = (await state.get_data()).get('choose_super_power')
#             spec = (await state.get_data()).get('choose_specialty')
#             await query.message.edit_text(text='–û—Ç–ª–∏—á–Ω–æüëç\n–ï—Å—Ç—å –µ—â—ë?',
#                                           reply_markup=await keyboards.get_worker_abilities_ikb(spec, arr))
#         else:
#             # TODO else case
#             pass
#
#     except Exception as ex:
#         print(f'Exceptinon in choose_duration:\n{ex}')


@router.callback_query(Worker.check_cv)
async def check_cv(query: CallbackQuery, state: FSMContext):
    try:
        if int(query.data):
            info = await state.get_data()
            if await db.save_cv(query.from_user.id, info.get("enter_name"), info.get("enter_email"),
                                info.get("enter_phone"),
                                info.get('enter_link'),
                                info.get("choose_specialty")):
                await main.bot.send_message(chat_id=config.cv_id, text=f'{query.from_user.id}\n\n–†–µ–∑—é–º–µ\n\n'
                                                                                  f'–ò–º—è: {info.get("enter_name")}\n'
                                                                                  f'–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {info.get("choose_specialty")}\n'
                                                                                  f'–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: {info.get("enter_link")}\n'
                                                                                  f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info.get("enter_phone")}\n'
                                                                                  f'Email: {info.get("enter_email")}',
                                            reply_markup=await keyboards.accept_cv_ikb())
                await state.clear()
                await query.message.edit_text(text=f'–†–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!',
                                              reply_markup=await keyboards.delete_kbd())
        else:
            # TODO else case
            pass

    except Exception as ex:
        print(f'Exceptinon in check_cv:\n{ex}')


@router.message(Worker.add_new_specialty)
async def add_new_specialty(message: Message, state: FSMContext):
    await state.set_state(Worker.choose_specialty)
    await main.bot.send_message(chat_id=config.cv_id, text=f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {message.text}\n'
                                                           f'–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
    await message.answer(f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {message.text} –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n'
                         f'–ü–æ–∫–∞ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –º–µ—é—â–∏—Ö—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π:',
                         reply_markup=await keyboards.get_specialists_ikb())
