import asyncio

from aiogram import Router, F
from aiogram.filters import and_f, or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

import config
import db
import msg
import keyboards
from filters import QueryDataFilter
from states import User, Worker, Client
from main import bot

router = Router(name=__name__)


@router.callback_query(QueryDataFilter('looking_for_specialists'))
async def client_menu(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await state.set_state(Client.menu)
        await query.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞üßë‚Äçüíª',
                                      reply_markup=await keyboards.client_menu())
    except Exception as ex:
        print(f'Error in client menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(QueryDataFilter('buy_subscription'))
async def buy_subscription(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        if await db.buy_basic_subscription(query.from_user.id):
            await query.answer(text='–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!', cache_time=3)
            order = await db.get_unsubscribed_projects(query.from_user.id)
            await bot.send_message(chat_id=config.projects_id, text=f'{order[1]}\n{query.from_user.id}\n\n'
                                                                    f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {order[2]}\n'
                                                                    f'–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {order[3]}\n'
                                                                    f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {order[4]}\n'
                                                                    f'–ë—é–¥–∂–µ—Ç: {order[5]}BYN\n',
                                   reply_markup=await keyboards.accept_project_ikb())
            await query.message.edit_text(text='–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤!',
                                          reply_markup=await keyboards.client_menu())
        else:
            await query.answer(text='–£–ø—Å...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            await asyncio.sleep(3)

    except Exception as ex:
        print(f'Error in search_spec:\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(QueryDataFilter('client_projects'))
async def client_projects(query: CallbackQuery, state: FSMContext):
    await state.clear()
    if await db.check_user_projects_count(query.from_user.id) > 0:
        await state.set_state(Client.project_list)
        # await query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:',
        #                               reply_markup=await keyboards.delete_kbd())
        projects = await db.get_user_projects(query.from_user.id)
        if len(projects) != 0:
            await state.update_data(projects_info=[projects, 0, len(projects)])
            await query.message.edit_text(text=await msg.display_project(projects[0], f'1/{len(projects)}'),
                                          reply_markup=await keyboards.project_list())
        else:
            await state.clear()
            await query.message.edit_text(text='–í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –ø–æ–∫–∞ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!')
    else:
        await state.set_state(Client.ask_create_project)
        await query.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤üò≠\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?',
                                      reply_markup=await keyboards.ask_create_project())
    # try:
    #     await state.clear()
    #     if await db.check_user_projects_count(query.from_user.id) > 0:
    #         await state.set_state(Client.project_list)
    #         projects = await db.get_user_projects(query.from_user.id)
    #         if projects != ():
    #             await state.update_data(projects_info=[projects, 0, len(projects)])
    #             # await query.message.edit_text(text='–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:', reply_markup=await keyboards.delete_kbd())
    #             await query.message.edit_text(text=await msg.display_project(projects[0], f'1/{len(projects)}'),
    #                                           reply_markup=await keyboards.project_list())
    #         else:
    #             await state.clear()
    #             await query.message.edit_text(text='–í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –ø–æ–∫–∞ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!')
    #     else:
    #         await state.set_state(Client.ask_create_project)
    #         await query.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤üò≠\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?',
    #                                       reply_markup=await keyboards.ask_create_project())
    # except Exception as ex:
    #     print(f'Error in client_projects menu\n{ex}')
    #     await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(or_f(QueryDataFilter('0'), QueryDataFilter('1')), Client.ask_create_project))
async def ask_create_project(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        if int(query.data):
            await state.set_state(Client.enter_title)
            await query.message.edit_text(text='–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:',
                                          reply_markup=await keyboards.delete_kbd())
        else:
            await state.set_state(Client.menu)
            await query.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞üßë‚Äçüíª',
                                          reply_markup=await keyboards.client_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(QueryDataFilter('search_spec'))
async def search_spec(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        if await db.check_user_projects_count(query.from_user.id) > 0:
            await state.set_state(Client.choose_project)
            # await query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:',
            #                               reply_markup=await keyboards.delete_kbd())
            projects = await db.get_user_projects(query.from_user.id)
            if len(projects) != 0:
                await state.update_data(projects_info=[projects, 0, len(projects)])
                await query.message.edit_text(text=await msg.display_project(projects[0], f'1/{len(projects)}'),
                                              reply_markup=await keyboards.project_menu())
            else:
                await state.clear()
                await query.message.edit_text(text='–í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –ø–æ–∫–∞ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!')
        else:
            await state.set_state(Client.ask_create_project)
            await query.message.edit_text(text='–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤üò≠\n–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?',
                                          reply_markup=await keyboards.ask_create_project())

    except Exception as ex:
        print(f'Error in search_spec:\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(QueryDataFilter('create_project'))
async def create_project(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        sub_status = await db.if_user_can_create_project(query.from_user.id)
        if sub_status == 2 or -1:
            await state.set_state(Client.enter_title)
            await query.message.edit_text(text='–•–æ—Ä–æ—à–æ, –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:',
                                          reply_markup=await keyboards.delete_kbd())

        elif sub_status == 1:
            await query.message.edit_text(text='–£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤\n'
                                               '–î–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É MAX',
                                          reply_markup=await keyboards.ask_buy_max())
        elif sub_status == 0:
            # TODO buy subscription
            await query.message.edit_text(text='–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!',
                                          reply_markup=await keyboards.buy_subscription())

    except Exception as ex:
        print(f'Error in create_project menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.message(Client.enter_title)
async def enter_title(message: Message, state: FSMContext):
    try:
        await state.update_data(enter_title=message.text)
        await state.set_state(Client.choose_spec)
        await message.answer(text='–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:',
                             reply_markup=await keyboards.get_specialists_ikb())
    except Exception as ex:
        print(f'Error in create_project menu\n{ex}')
        await message.answer(text=msg.errorMessage)


@router.callback_query(Client.choose_spec)
async def choose_spec(query: CallbackQuery, state: FSMContext):
    try:
        if query.data in config.specialties:
            if query.data == config.specialties[-1]:
                await state.set_state(Client.add_new_specialty)
                # TODO new specialties
                await query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –º—ã –¥–æ–±–∞–≤–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–º '
                                              '–≤—Ä–µ–º–µ–Ω–∏:',
                                              reply_markup=await keyboards.delete_kbd())
            else:
                await state.update_data(choose_spe—Å=query.data)
                await state.set_state(Client.enter_descr)
                await query.message.edit_text(text='–ö–ª–∞—Å—Å!\n–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∑–∞–¥–∞—á–∏:',
                                              reply_markup=await keyboards.delete_kbd())
                # await state.set_state(Client.choose_super_power)
                # await query.message.edit_text(
                #     '–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—åü§è\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                #     '–≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: ',
                #     reply_markup=await keyboards.get_abilities_ikb(query.data))
        else:
            await query.message.edit_text('–•–æ—Ä–æ—à–æ, –Ω–æ –ø–æ–ø—Ä–æ–±—É–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º....')
    except Exception as ex:
        print(f'Error in choose_spec menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.message(Client.add_new_specialty)
async def add_new_specialty(message: Message, state: FSMContext):
    await state.set_state(Client.choose_spec)
    await bot.send_message(chat_id=config.cv_id, text=f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {message.text}\n'
                                                      f'–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}')
    await message.answer(f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ç–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {message.text} –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n'
                         f'–ü–æ–∫–∞ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –º–µ—é—â–∏—Ö—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π:',
                         reply_markup=await keyboards.get_specialists_ikb())


# @router.callback_query(Client.choose_super_power)
# async def choose_super_power(query: CallbackQuery, state: FSMContext):
#     try:
#         spec = (await state.get_data()).get('choose_spe—Å')
#         if query.data in config.abilities.get(spec):
#             await state.update_data(choose_super_power=query.data)
#             await state.set_state(Client.enter_descr)
#             await query.message.edit_text(text='–ö–ª–∞—Å—Å!\n–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –∑–∞–¥–∞—á–∏:',
#                                           reply_markup=await keyboards.delete_kbd())
#         else:
#             await query.message.edit_text('–•–æ—Ä–æ—à–æ, –Ω–æ –ø–æ–ø—Ä–æ–±—É—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º....')
#     except Exception as ex:
#         print(f'Error in choose_spec menu\n{ex}')
#         await query.message.answer(text=msg.errorMessage)


@router.message(Client.enter_descr)
async def enter_descr(message: Message, state: FSMContext):
    try:
        await state.update_data(enter_descr=message.text)
        await state.set_state(Client.enter_price)
        await message.answer(text='–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–¥–µ–ª–∏—Ç—å(–≤ BYN) –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É?')
    except Exception as ex:
        print(f'Error in choose_spec menu\n{ex}')
        await message.answer(text=msg.errorMessage)


@router.message(Client.enter_price)
async def enter_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        if price > 0:
            await state.update_data(enter_price=price)
            await state.set_state(Client.approve_project)
            info = await state.get_data()
            await message.answer(text='–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏...\n'
                                      '–í–æ—Ç, —á—Ç–æ —É –≤–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å:\n\n'
                                      f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {info.get("enter_title")}\n'
                                      f'–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {info.get("choose_spe—Å")}\n'
                                      f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {info.get("enter_descr")}\n'
                                      f'–ë—é–¥–∂–µ—Ç: {price}BYN\n\n'
                                      f'–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç?', reply_markup=await keyboards.ask_create_project())
        else:
            await message.answer(text='–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–ª–∏ —Ü–µ–ª—ã–º –∏–ª–∏ –¥—É—Å—è—Ç–∏—á–Ω—ã–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!')
    except Exception as ex:
        print(f'Error in choose_spec menu\n{ex}')
        await message.answer(
            text=msg.errorMessage + '\n–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–ª–∏ —Ü–µ–ª—ã–º –∏–ª–∏ –¥—É—Å—è—Ç–∏—á–Ω—ã–º –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!')


@router.callback_query(and_f(Client.approve_project, or_f(QueryDataFilter('1'), QueryDataFilter('0'))))
async def approve_project(query: CallbackQuery, state: FSMContext):
    try:
        if int(query.data):
            sub_state = await db.if_user_can_create_project(query.from_user.id)
            if sub_state == -1:
                info = await state.get_data()
                order_id = await db.save_project(query.from_user.id, info.get("enter_title"), info.get("choose_spe—Å"),
                                                 info.get("enter_descr"), info.get("enter_price"), -1)
                await query.message.edit_text(text=f'–í–∞—à –∑–∞–∫–∞–∑ #{order_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –¥–ª—è –µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                                                   ' –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                              reply_markup=await keyboards.buy_subscription())
            elif sub_state == 0:
                await query.message.edit_text(text='–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É',
                                              reply_markup=await keyboards.buy_subscription())
            elif sub_state == 1:
                await query.message.edit_text(text='–£ –≤–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–æ–µ–∫—Ç–æ–≤\n'
                                                   '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö'
                                                   ' –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É MAX',
                                              reply_markup=await keyboards.buy_subscription())
            elif sub_state == 2:
                info = await state.get_data()
                order_id = await db.save_project(query.from_user.id, info.get("enter_title"), info.get("choose_spe—Å"),
                                                 info.get("enter_descr"), info.get("enter_price"), 0)
                await state.clear()
                await bot.send_message(chat_id=config.projects_id, text=f'{order_id}\n{query.from_user.id}\n\n'
                                                                        f'–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {info.get("enter_title")}\n'
                                                                        f'–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {info.get("choose_spe—Å")}\n'
                                                                        f'–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {info.get("enter_descr")}\n'
                                                                        f'–ë—é–¥–∂–µ—Ç: {info.get("enter_price")}BYN\n',
                                       reply_markup=await keyboards.accept_project_ikb())
                await query.message.edit_text(text=f'–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∑–∞–∫–∞–∑ #{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!')
        else:
            await query.answer(text="–•–æ—Ä–æ—à–æ, –∑–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω!", cache_time=5)
            await state.clear()
            await state.set_state(Client.menu)
            await query.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞üßë‚Äçüíª',
                                          reply_markup=await keyboards.client_menu())
    except Exception as ex:
        print(f'Error in approve_project\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('back'), or_f(Client.project_list, Client.choose_project)))
async def back_to_menu(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await state.set_state(Client.menu)
        await query.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞üßë‚Äçüíª',
                                      reply_markup=await keyboards.client_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('+1'), Client.choose_project))
async def next_project(query: CallbackQuery, state: FSMContext):
    try:
        projects = (await state.get_data()).get('projects_info')
        if projects[2] > 1:
            projects[1] += 1
            if projects[1] >= projects[2]:
                projects[1] = 0
            await state.update_data(projects_info=projects)
            await query.message.edit_text(
                text=await msg.display_project(projects[0][projects[1]], f'{projects[1] + 1}/{projects[2]}'),
                reply_markup=await keyboards.project_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('-1'), Client.choose_project))
async def previous_project(query: CallbackQuery, state: FSMContext):
    try:
        projects = (await state.get_data()).get('projects_info')
        if projects[2] > 1:
            projects[1] -= 1
            if projects[1] < 0:
                projects[1] = projects[2] - 1
            await state.update_data(projects_info=projects)
            await query.message.edit_text(
                text=await msg.display_project(projects[0][projects[1]], f'{projects[1] + 1}/{projects[2]}'),
                reply_markup=await keyboards.project_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('project_specialists'), Client.choose_project))
async def project_specialists(query: CallbackQuery, state: FSMContext):
    try:
        projects = (await state.get_data()).get('projects_info')
        specialists = await db.fetch_specialists(projects[0][projects[1]][3], query.from_user.id)
        print(specialists)
        if len(specialists) != 0:
            await state.update_data(specialists_info=[specialists, 0, len(specialists), projects[0][projects[1]]])
            await state.set_state(Client.choose_specialist)
            # await query.message.edit_text(text='–ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:', reply_markup=await keyboards.delete_kbd())
            await query.message.edit_text(text=await msg.display_specialists(specialists[0], f'{1}/{len(specialists)}'),
                                          reply_markup=await keyboards.specialists_list_menu())
        else:
            await query.answer(text=f'–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–ø–µ—Ü–∞–ª–∏—Å—Ç–æ–≤, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ(')
            # await asyncio.sleep(5)
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('delete'), Client.project_list))
async def delete_project(query: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        project_id = int(query.message.text.split('\n')[0][-4:])
        await state.update_data(delete_project_id=project_id)
        await state.set_state(Client.ask_delete_project)
        await query.message.edit_text(text=f'–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç #{project_id}?',
                                      reply_markup=await keyboards.delete_project_ikb())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('+1'), Client.project_list))
async def next_project(query: CallbackQuery, state: FSMContext):
    try:
        projects = (await state.get_data()).get('projects_info')
        if projects[2] > 1:
            projects[1] += 1
            if projects[1] >= projects[2]:
                projects[1] = 0
            await state.update_data(projects_info=projects)
            await query.message.edit_text(
                text=await msg.display_project(projects[0][projects[1]], f'{projects[1] + 1}/{projects[2]}'),
                reply_markup=await keyboards.project_list())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('-1'), Client.project_list))
async def previous_project(query: CallbackQuery, state: FSMContext):
    try:
        projects = (await state.get_data()).get('projects_info')
        if projects[2] > 1:
            projects[1] -= 1
            if projects[1] < 0:
                projects[1] = projects[2] - 1
            await state.update_data(projects_info=projects)
            await query.message.edit_text(
                text=await msg.display_project(projects[0][projects[1]], f'{projects[1] + 1}/{projects[2]}'),
                reply_markup=await keyboards.project_list())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(or_f(QueryDataFilter('1'), QueryDataFilter('0')), Client.ask_delete_project))
async def ask_delete_project(query: CallbackQuery, state: FSMContext):
    try:
        if int(query.data):
            if await db.delete_projects((await state.get_data()).get('delete_project_id')):
                await query.answer(text='–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!', cache_time=3)
        await state.clear()
        await state.set_state(Client.menu)
        await query.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞üßë‚Äçüíª',
                                      reply_markup=await keyboards.client_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('back'), Client.choose_specialist))
async def back_to_projects(query: CallbackQuery, state: FSMContext):
    try:
        projects = (await state.get_data()).get('projects_info')
        if projects[2] > 1:
            await state.set_state(Client.choose_project)
            await state.update_data(projects_info=projects)
            await query.message.edit_text(
                text=await msg.display_project(projects[0][projects[1]], f'{projects[1] + 1}/{projects[2]}'),
                reply_markup=await keyboards.project_menu())
        else:
            await state.clear()
            await state.set_state(Client.menu)
            await query.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∑–∞–∫–∞–∑—á–∏–∫–∞üßë‚Äçüíª',
                                          reply_markup=await keyboards.client_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('+1'), Client.choose_specialist))
async def next_specialist(query: CallbackQuery, state: FSMContext):
    try:
        specialists = (await state.get_data()).get('specialists_info')
        if specialists[2] > 1:
            specialists[1] += 1
            if specialists[1] >= specialists[2]:
                specialists[1] = 0
            await state.update_data(specialists_info=specialists)
            await query.message.edit_text(
                text=await msg.display_specialists(specialists[0][specialists[1]],
                                                   f'{specialists[1] + 1}/{specialists[2]}'),
                reply_markup=await keyboards.specialists_list_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('-1'), Client.choose_specialist))
async def previous_specialist(query: CallbackQuery, state: FSMContext):
    try:
        specialists = (await state.get_data()).get('specialists_info')
        if specialists[2] > 1:
            specialists[1] -= 1
            if specialists[1] < 0:
                specialists[1] = specialists[2] - 1
            await state.update_data(specialists_info=specialists)
            await query.message.edit_text(
                text=await msg.display_specialists(specialists[0][specialists[1]],
                                                   f'{specialists[1] + 1}/{specialists[2]}'),
                reply_markup=await keyboards.specialists_list_menu())
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)


@router.callback_query(and_f(QueryDataFilter('choose_specialist'), Client.choose_specialist))
async def choose_specialist(query: CallbackQuery, state: FSMContext):
    try:
        specialists = (await state.get_data()).get('specialists_info')
        if await db.add_like(query.from_user.id, specialists[0][specialists[1]][0], specialists[3][1]):
            await bot.send_message(chat_id=specialists[0][specialists[1]][0], text=f'–í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã!\n'
                                                                                   f'–ü—Ä–æ–µ–∫—Ç #{specialists[3][1]}\n'
                                                                                   f'{await msg.display_offer_to_specialist(specialists[3])}',
                                   reply_markup=await keyboards.accept_offer_ikb())
            await query.answer(text='–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
            await state.clear()
            await state.set_state(Client.menu)
            await query.message.edit_text(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é!', reply_markup=await keyboards.client_menu())
        else:
            await query.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!')
            await asyncio.sleep(3)
    except Exception as ex:
        print(f'Error in client_projects menu\n{ex}')
        await query.message.answer(text=msg.errorMessage)
